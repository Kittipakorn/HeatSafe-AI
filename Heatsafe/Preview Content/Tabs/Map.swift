import SwiftUI
import MapKit
import CoreLocation

struct MapView: UIViewRepresentable {
    @StateObject private var locationManager = LocationManagerr()
    
    func makeUIView(context: Context) -> MKMapView {
        let mapView = MKMapView()
        mapView.delegate = context.coordinator
        mapView.showsUserLocation = true
        mapView.userTrackingMode = .follow
        
        locationManager.requestLocation()
        return mapView
    }
    
    func updateUIView(_ uiView: MKMapView, context: Context) {
        uiView.removeAnnotations(uiView.annotations)
        if let pin = locationManager.generatedPin {
            uiView.addAnnotation(pin)
        }
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, MKMapViewDelegate {
        var parent: MapView
        
        init(_ parent: MapView) {
            self.parent = parent
        }
        
        func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
            if annotation is MKUserLocation { return nil }
            
            let identifier = "CustomIcon"
            var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)
            
            if annotationView == nil {
                annotationView = MKAnnotationView(annotation: annotation, reuseIdentifier: identifier)
                
                // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Apple Watch Icon
                let circleView = UIView()
                circleView.frame = CGRect(x: 0, y: 0, width: 50, height: 50)
                circleView.backgroundColor = UIColor.cyan
                circleView.layer.cornerRadius = 25 // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°
                circleView.layer.masksToBounds = true
                
                let iconImageView = UIImageView(image: UIImage(systemName: "applewatch"))
                iconImageView.frame = CGRect(x: 9, y:9, width: 30, height: 30) // ‚úÖ ‡∏ß‡∏≤‡∏á icon ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                iconImageView.contentMode = .scaleAspectFit
                
                circleView.addSubview(iconImageView) // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                
                annotationView?.addSubview(circleView)
                annotationView?.frame = CGRect(x: 0, y: 0, width: 50, height: 50)
            } else {
                annotationView?.annotation = annotation
            }
            
            return annotationView
        }
    }
}

// ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Pin ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ 100 ‡πÄ‡∏°‡∏ï‡∏£
@MainActor
class LocationManagerr: NSObject, ObservableObject, CLLocationManagerDelegate {
    private let manager = CLLocationManager()
    @Published var lastLocation: CLLocationCoordinate2D?
    @Published var generatedPin: MKPointAnnotation?
    
    override init() {
        super.init()
        manager.delegate = self
        manager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
        manager.requestWhenInUseAuthorization()
    }
    
    func requestLocation() {
        manager.startUpdatingLocation()
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let location = locations.last else { return }
        DispatchQueue.main.async {
            self.lastLocation = location.coordinate
            self.manager.stopUpdatingLocation()
            self.generateRandomPin(center: location.coordinate) // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Pin ‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ 100m
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("‚ùå Error updating location: \(error.localizedDescription)")
    }
    
    /// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Pin ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 100 ‡πÄ‡∏°‡∏ï‡∏£
    func generateRandomPin(center: CLLocationCoordinate2D) {
        let radius: Double = 100 // ‡∏£‡∏±‡∏®‡∏°‡∏µ 100 ‡πÄ‡∏°‡∏ï‡∏£
        let randomCoordinate = randomCoordinate(from: center, radius: radius)
        
        let pin = MKPointAnnotation()
        pin.coordinate = randomCoordinate
        pin.title = "üìç ‡∏à‡∏∏‡∏î‡∏™‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 100 ‡∏°."
        self.generatedPin = pin
    }
    
    /// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á
    func randomCoordinate(from center: CLLocationCoordinate2D, radius: Double) -> CLLocationCoordinate2D {
        let radiusInDegrees = radius / 111000.0 // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏°‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏á‡∏®‡∏≤
        let angle = Double.random(in: 0...(2 * .pi)) // ‡∏™‡∏∏‡πà‡∏°‡∏°‡∏∏‡∏°
        
        let newLat = center.latitude + (radiusInDegrees * cos(angle))
        let newLon = center.longitude + (radiusInDegrees * sin(angle))
        
        return CLLocationCoordinate2D(latitude: newLat, longitude: newLon)
    }
}

struct MapView_Previews: PreviewProvider {
    static var previews: some View {
        MapView()
    }
}
